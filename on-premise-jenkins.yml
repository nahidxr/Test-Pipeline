pipeline {
    agent any
    tools {
        maven "Maven-3.9.3"
    }
    environment {
        imageName = "nahid003/${JOB_NAME}:${BUILD_ID}"
    }

    stages {
        stage('Git Clone') {
            steps {
                git branch: 'main', credentialsId: 'git_cred', url: 'https://github.com/nahidxr/Test-Pipeline.git'
            }
        }

        stage('Maven Build') {
            steps {
                sh 'mvn clean install'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    // Execute SonarQube scanner
                    withSonarQubeEnv('sonar') {
                        sh """
                            sonar-scanner \
                            -Dsonar.projectKey=nex-lms-project \
                            -Dsonar.sources=src \
                            -Dsonar.host.url=http://192.168.5.223:9000 \
                            -Dsonar.login=sqa_6f41a83856b3923f20a360254bc745b632a03001
                        """
                    }
                }
            }
        }

        stage('Docker Image Build') {
            steps {
                script {
                    dockerImage = docker.build(imageName)
                }
            }
        }

        stage('Push to Docker Registry') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-key') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Docker Image Remove') {
            steps {
                script {
                    sh "docker rmi \"nahid003/${JOB_NAME}:${BUILD_ID}\""
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig(credentialsId: 'kube-test') {
                        sh 'sed -i "s/TAG/${BUILD_ID}/g" kubernetes-deploy/main.yml'
                        def mysqlPodExists = sh(
                            script: 'kubectl get pod -l app=my-mysql -o name',
                            returnStatus: true
                        )
                        def webServerPodExists = sh(
                            script: 'kubectl get pod -l app=my-webserver -o name',
                            returnStatus: true
                        )
                        if (webServerPodExists == 0 || mysqlPodExists == 0) {
                            try {
                                sh 'kubectl delete -f kubernetes-deploy/main.yml'
                            } catch (Exception e) {
                                echo "Error deleting pods: ${e.getMessage()}"
                            }
                        }
                        sh 'kubectl apply -f kubernetes-deploy/main.yml'
                    }
                }
            }
        }
    }
}
